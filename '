use crate::{
    scanner::{Token, TokenType},
    Process,
};

pub enum Expr {
    Binary,
    Literal(Literal),
}

pub enum Literal {
    Boolean(bool),
    Number(f64),
    String(String),
    None,
}

pub struct Binary {
    left: Box<Expr>,
    operator: Token,
    right: Box<Expr>,
}

pub struct Parser {
    tokens: Vec<Token>,
    current: usize,
    had_error: bool,
}

impl Parser {
    pub fn new() -> Self {
        Self {
            tokens: Vec::new(),
            current: 0,
            had_error: false,
        }
    }

    fn matches(&mut self, types: &[TokenType]) -> bool {
        for ty in types {
            if self.match_ty(ty) {
                return true;
            }
        }
        false
    }

    fn match_ty(&mut self, ty: &TokenType) -> bool {
        if self.check(ty) {
            self.advance();
            true
        } else {
            false
        }
    }

    fn expression(&mut self) -> Expr {
        self.equality()
    }

    fn equality(&mut self) -> Expr {
        todo!()
    }

    fn is_at_end(&self) -> bool {
        self.peek().ty == TokenType::EOF
    }

    fn peek(&self) -> &Token {
        &self.tokens[self.current]
    }

    fn advance(&mut self) -> &Token {
        if !self.is_at_end() {
            self.current += 1;
        }
        self.previous()
    }

    fn previous(&self) -> &Token {
        &self.tokens[self.current - 1]
    }

    fn check(&self, ty: &TokenType) -> bool {
        if self.is_at_end() {
            false
        } else {
            self.peek().ty == *ty
        }
    }

    fn comparison(&mut self) -> Expr {
        todo!()
    }

    fn term(&mut self) -> Expr {
        todo!()
    }

    fn factor(&mut self) -> Expr {
        todo!()
    }

    fn unary(&mut self) -> Expr {
        todo!()
    }

    fn primary(&mut self, ty: &TokenType) -> Expr {
        if self.match_next(&[TokenType::FALSE]) {
            return Expr::Literal(Literal::Boolean(false));
        }

        if self.match_next(&[TokenType::TRUE]) {
            return Expr::Literal(Literal::Boolean(true));
        }
    }
}

impl Process for Parser {
    type Input = Vec<Token>;
    type Output = Expr;

    fn run(&mut self, input: Self::Input) -> Self::Output {
        self.tokens = input;
        todo!()
    }

    fn had_error(&self) -> bool {
        self.had_error
    }
}
